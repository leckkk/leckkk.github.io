<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leck的吹逼现场</title>
  
  
  <link href="http://leckkk.github.io/atom.xml" rel="self"/>
  
  <link href="http://leckkk.github.io/"/>
  <updated>2021-03-16T04:53:02.237Z</updated>
  <id>http://leckkk.github.io/</id>
  
  <author>
    <name>leck</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://leckkk.github.io/2021/03/16/hello-world/"/>
    <id>http://leckkk.github.io/2021/03/16/hello-world/</id>
    <published>2021-03-16T03:32:39.417Z</published>
    <updated>2021-03-16T04:53:02.237Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://leckkk.github.io/2020/12/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://leckkk.github.io/2020/12/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2020-12-19T07:36:16.651Z</published>
    <updated>2021-03-16T04:55:55.565Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a><strong>计算机网络体系结构</strong></h2><table><thead><tr><th>层数</th><th>OSI7层</th><th>层数</th><th>TCP/IP的四层协议</th><th>层数</th><th>五层协议</th></tr></thead><tbody><tr><td>7</td><td>应用层</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>表示层</td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>会话层</td><td>4</td><td>应用层（telnet/ftp/http/smtp）</td><td>5</td><td>应用层</td></tr><tr><td>4</td><td>运输层</td><td>3</td><td>运输层（tcp/udp）</td><td>4</td><td>运输层</td></tr><tr><td>3</td><td>网络层</td><td>2</td><td>网络层（ip/icmp/igmp）</td><td>3</td><td>网络层</td></tr><tr><td>2</td><td>数据链路层</td><td>1</td><td>链路层（以太网驱动程序）</td><td>2</td><td>数据链路层</td></tr><tr><td>1</td><td>物理层</td><td></td><td></td><td>1</td><td>物理层</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><strong>运输层</strong></h2><h3 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a><strong>TCP与UDP区别</strong></h3><ol><li>基于连接和无连接</li><li>对系统资源要求一个多一个少</li><li>TCP保证数据正确性，UDP可能丢包，TCP能保证数据顺序，UDP不保证</li><li>TCP面向字节流，UDP面向报文</li><li>TCP首部20字节，UDP8字节</li><li>TCP一条只能点对点，UDP可以一对一、一对多、多对一、多对多</li><li>UDP没有拥塞控制</li></ol><h3 id="使用udp和tcp的各种应用和应用层协议"><a href="#使用udp和tcp的各种应用和应用层协议" class="headerlink" title="使用udp和tcp的各种应用和应用层协议"></a><strong>使用udp和tcp的各种应用和应用层协议</strong></h3><table><thead><tr><th>应用</th><th>应用层协议</th><th>运输层协议</th></tr></thead><tbody><tr><td>名字转换</td><td>DNS</td><td>UDP</td></tr><tr><td>文件传送</td><td>TFTP（简单文件传送协议）</td><td>UDP</td></tr><tr><td>路由选择协议</td><td>RIP（路由信息协议）</td><td>UDP</td></tr><tr><td>IP地址配置</td><td>DHCP</td><td>UDP</td></tr><tr><td>网络管理</td><td>SNMP（简单网络管理协议）</td><td>UDP</td></tr><tr><td>远程文件服务器</td><td>NFS（网络文件系统）</td><td>UDP</td></tr><tr><td>多播</td><td>IGMP（网际组管理协议）</td><td>UDP</td></tr><tr><td>电子邮件</td><td>SMTP（简单邮件传送协议）</td><td>TCP</td></tr><tr><td>远程终端接入</td><td>TELNET（远程终端协议）</td><td>TCP</td></tr><tr><td>万维网</td><td>HTTP</td><td>TCP</td></tr><tr><td>文件传送</td><td>FTP</td><td>TCP</td></tr></tbody></table><hr><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a><strong>TCP</strong></h3><h4 id="TCP报文结构"><a href="#TCP报文结构" class="headerlink" title="TCP报文结构"></a><strong>TCP报文结构</strong></h4><p><img src="https://img-blog.csdn.net/20140609125220296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTE5ODgxMDI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a><strong>TCP三次握手</strong></h4><p>URG(urgent紧急)</p><p>ACK(Acknowledgement 确认ACK) 1位</p><p>PSH(push传送) 1为</p><p>RST(reset重置) 1位</p><p>SYN(synchronous建立联机) 1位</p><p>FIN(finish结束) 1位</p><p>Sequence number(顺序号码) 4字节</p><p>Acknowledge number(确认号码) 4字节</p><p>第一次握手：主机 A 发送位码为 syn＝1，随机产生 seq number=1234567 的数据包到服务器，主机 B 由 SYN=1 知道，A 要求建立联机；</p><p>SYN=1,seq=x</p><p>第二次握手：主机 B 收到请求后要确认联机信息，向 A 发送 ack number=(主机 A 的 seq+1)，syn=1，ack=1，随机产生 seq=7654321 的包；</p><p>SYN=1,ACK=1,ack=x+1,seq=y</p><p>第三次握手：主机 A 收到后检查 ack number 是否正确，即第一次发送的 seq number+1，以及位码 ack 是否为 1，若正确，主机 A 会再发送 ack number=(主机 B 的 seq+1)，ack=1，主机 B 收到后确认 seq 值与 ack=1 则连接建立成功。</p><p>ACK=1,ack=y+1,seq=x+1</p><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a><strong>TCP四次挥手</strong></h4><hr><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a><strong>UDP</strong></h3><h4 id="UDP报文结构"><a href="#UDP报文结构" class="headerlink" title="UDP报文结构"></a><strong>UDP报文结构</strong></h4><p><img src="http://c.biancheng.net/uploads/allimg/191111/6-1911111249535K.gif" alt="img"></p><h3 id="KCP"><a href="#KCP" class="headerlink" title="KCP"></a><strong>KCP</strong></h3><p>KCP是一个快速可靠协议，能以比 TCP浪费10%-20%的带宽的代价，换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。纯算法实现，并不负责底层协议（如UDP）的收发，需要使用者自己定义下层数据包的发送方式，以 callback的方式提供给 KCP。 连时钟都需要外部传递进来，内部不会有任何一次系统调用。</p><h3 id="mKCP"><a href="#mKCP" class="headerlink" title="mKCP"></a><strong>mKCP</strong></h3><p>vmess魔改的kcp协议</p><hr><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h2><h3 id="HTTP-腾讯云开发者手册-https-cloud-tencent-com-developer-doc-1117"><a href="#HTTP-腾讯云开发者手册-https-cloud-tencent-com-developer-doc-1117" class="headerlink" title="HTTP ([腾讯云开发者手册][https://cloud.tencent.com/developer/doc/1117])"></a><strong>HTTP ([腾讯云开发者手册][<a href="https://cloud.tencent.com/developer/doc/1117]">https://cloud.tencent.com/developer/doc/1117]</a>)</strong></h3><p><strong>超文本传输协议</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：<strong>HTTP</strong>）是一种用于分布式、协作式和超媒体信息系统的应用层协议。</p><p>HTTP通信通常通过TCP/IP连接进行。默认端口为TCP 80，但也可以使用其他端口。这并不排除在Internet或其他网络上的任何其他协议之上实现HTTP。HTTP只假定传输可靠；可以使用任何提供这种保证的协议。</p><p>http请求包括:请求行、请求头、请求体</p><p>http响应包括:响应行、响应头、响应体</p><hr><h4 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a><strong>HTTP工作原理</strong></h4><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>以下是 HTTP 请求/响应的步骤：</p><p><strong>1. 客户端连接到Web服务器</strong><br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。</p><p><strong>2. 发送HTTP请求</strong><br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p><p><strong>3. 服务器接受请求并返回HTTP响应</strong><br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p><p><strong>4. 释放连接TCP连接</strong><br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><p><strong>5. 客户端浏览器解析HTML内容</strong><br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p><p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p><ol><li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li><li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</li><li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li><li>释放 TCP连接;</li><li>浏览器将该 html 文本并显示内容; 　</li></ol><hr><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a><strong>请求行</strong></h4><p><strong>POST /chapter17/user.html HTTP/1.1</strong></p><p><strong>请求方式</strong> <strong>资源路径</strong> <strong>协议/版本</strong></p><h5 id="请求方法（八种）"><a href="#请求方法（八种）" class="headerlink" title="请求方法（八种）"></a><strong>请求方法（八种）</strong></h5><ul><li><p><strong>GET</strong></p><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取资料，而不应当被用于产生“副作用”的操作中，例如在网络应用程序中。其中一个原因是GET可能会被网络爬虫等随意访问。参见安全方法。浏览器直接发出的GET只能由一个url触发。GET上要在url之外带一些参数就只能依靠url上附带querystring。</p></li><li><p><strong>POST</strong></p><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。每次提交，表单的数据被浏览器用编码到HTTP请求的body里。浏览器发出的POST请求的body主要有两种格式，一种是application/x-www-form-urlencoded用来传输简单的数据，大概就是”key1=value1&amp;key2=value2”这样的格式。另外一种是传文件，会采用multipart/form-data格式。采用后者是因为application/x-www-form-urlencoded的编码方式对于文件这种二进制的数据非常低效。</p></li><li><p><strong>PUT</strong></p><p>向指定资源位置上传其最新内容。</p></li><li><p><strong>DELETE</strong></p><p>请求服务器删除Request-URI所标识的资源。</p></li><li><p><strong>HEAD</strong></p><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p></li><li><p><strong>TRACE</strong></p><p>回显服务器收到的请求，主要用于测试或诊断。</p></li><li><p><strong>OPTIONS</strong></p><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p></li><li><p><strong>CONNECT</strong></p><p>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</p><p><strong>HTTP服务器至少应该实现GET和HEAD方法</strong>，其他方法都是可选的。当然，所有的方法支持的实现都应当符合下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：</p></li><li><p><strong>PATCH</strong>（由 <strong>RFC 5789</strong>指定的方法）</p><p>用于将局部修改应用到资源。</p></li></ul><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a><strong>请求头</strong></h4><p>请求头从第二行开始，到第一个空行结束。请求头和请求体之间存在一个空行。</p><p>请求头通常以键值对{key:value}方式传递数据。</p><p>key为规范的固定值。value为key对应的取值，通常是一个值，可能是一组。</p><h5 id="常见请求头属性"><a href="#常见请求头属性" class="headerlink" title="常见请求头属性"></a><strong>常见请求头属性</strong></h5><ul><li>Referer:表示这个请求是从哪个url跳过来的,通过百度来搜索淘宝网,那么在进入淘宝网的请求报文中,Referer的值就是:<a href="http://www.baidu.com.如果是直接访问就不会有这个头./">www.baidu.com。如果是直接访问就不会有这个头。</a></li><li>Accept:告诉服务端,该请求所能支持的响应媒体类型(MIME type)</li><li>User-Agent:浏览器通知服务器，客户端浏览器与操作系统相关信息</li><li><strong>Connection:表示客户端与服务连接类型；Keep-Alive表示持久连接，close已关闭</strong></li><li>Host:请求的服务器主机名</li><li>Content-Length:请求体的长度</li><li>Content-Type:用于指示所述媒体类型(MIME type)的资源。在请求中，客户端通知服务器实际发送了什么类型的数据。在响应中，告诉客户实际返回的内容的内容类型。</li><li>Cache-Control：指定请求和响应遵循的缓存机制</li></ul><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a><strong>请求体</strong></h4><p>空行下面的数据</p><h4 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a><strong>HTTP版本</strong></h4><p><strong>HTTP/0.9</strong></p><p>已过时。只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。</p><p><strong>HTTP/1.0</strong></p><p>这是第一个在通讯中指定版本号的HTTP协议版本。</p><p><strong>HTTP/1.1</strong>（[RFC 2616][<a href="https://cloud.tencent.com/developer/section/1190064]%EF%BC%89">https://cloud.tencent.com/developer/section/1190064]）</a></p><p>默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以<a href="https://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%BA%BF%E5%8C%96">管道方式</a>在同时发送多个请求，以便降低线路负载，提高传输速度。</p><p>HTTP/1.1相较于HTTP/1.0协议的区别主要体现在：</p><ul><li>缓存处理</li><li>带宽优化及网络连接的使用</li><li>错误通知的管理</li><li>消息在网络中的发送</li><li>互联网地址的维护</li><li>安全性及完整性</li></ul><p><strong>HTTP/2.0</strong></p><p>![image-20210223200751992](/Users/mac/Library/Application Support/typora-user-images/image-20210223200751992.png)</p><p>![image-20210223200825838](/Users/mac/Library/Application Support/typora-user-images/image-20210223200825838.png)</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a><strong>HTTPS</strong></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;计算机网络体系结构&quot;&gt;&lt;a href=&quot;#计算机网络体系结构&quot; class=&quot;headerlink&quot; title=&quot;计算机网络体系结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;计算机网络体系结构&lt;/strong&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据库与ORM</title>
    <link href="http://leckkk.github.io/2020/09/18/laravel%E6%BA%90%E7%A0%81-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CORM/"/>
    <id>http://leckkk.github.io/2020/09/18/laravel%E6%BA%90%E7%A0%81-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CORM/</id>
    <published>2020-09-18T05:39:35.721Z</published>
    <updated>2021-03-16T04:56:38.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Database核心架构"><a href="#Database核心架构" class="headerlink" title="Database核心架构"></a>Database核心架构</h2><p>Laravel主要有两种方式与数据库进行交互：</p><ul><li><p><code>DB</code> , <code>DB</code>是与 PHP 底层的 <code>PDO </code>直接进行交互的，通过查询构建器提供了一个方便的接口来创建及运行数据库查询语句。</p></li><li><p><code>Eloquent Model</code>,  <code>Eloquent</code> 是建立在 <code>DB</code> 的查询构建器基础之上，对数据库进行了抽象的 <code>ORM</code>，功能十分丰富让我们可以避免写复杂的 SQL 语句，并用优雅的方式解决了数据表之间的关联关系。</p></li></ul><p>上面说的这两个部分都包括在了 <code>Illuminate/Database</code> 包里面，除了作为 Laravel 的数据库层 <code>Illuminate/Database</code>还是一个 PHP 数据库工具集， 在任何项目里你都可以通过<code> composer install illuminate/databse</code> 安装并使用它。</p><h3 id="Database-服务注册与初始化"><a href="#Database-服务注册与初始化" class="headerlink" title="Database 服务注册与初始化"></a>Database 服务注册与初始化</h3><p>Database是作为一种服务注册到服务容器里提供给Laravel应用使用的，他的服务提供容器是<code>Iluminate\Database\DatabaseServiceProvider</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置连接分析器和事件分发器</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Model::setConnectionResolver(<span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;db&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    Model::setEventDispatcher(<span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;events&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//清除掉已经 booted的Model和全局查询作用域</span></span><br><span class="line">    Model::clearBootedModels();</span><br><span class="line"><span class="comment">//注册ConnectionServices</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerConnectionServices();</span><br><span class="line"><span class="comment">//注册Eloquent工厂</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerEloquentFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerQueueableEntityResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clearBootedModels</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span>::<span class="variable">$booted</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span>::<span class="variable">$globalScopes</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConnectionServices</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 连接工厂用于在数据库上创建实际的连接实例。我们将把工厂注入管理器，以便它可以在实际需要时（而不是以前）建立连接。（依赖注入使其能延迟加载）</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;db.factory&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConnectionFactory(<span class="variable">$app</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库管理器用于解析各种连接，因为可以管理多个连接。它还实现了连接解析器接口，该接口可被其他需要连接的组件使用。</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;db&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DatabaseManager(<span class="variable">$app</span>, <span class="variable">$app</span>[<span class="string">&#x27;db.factory&#x27;</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//数据库连接实例，是与底层PDO接口交互的底层类</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">&#x27;db.connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>[<span class="string">&#x27;db&#x27;</span>]-&gt;connection();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//所以 DatabaseManager 作为接口与外部交互，在应用需要时通过 ConnectionFactory 创建了数据库连接实例，最后执行数据库的增删改查是由数据库连接实例来完成的。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerEloquentFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(FakerGenerator::class, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span>, <span class="variable">$parameters</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$locale</span> = <span class="variable">$parameters</span>[<span class="string">&#x27;locale&#x27;</span>] ?? <span class="variable">$app</span>[<span class="string">&#x27;config&#x27;</span>]-&gt;get(<span class="string">&#x27;app.faker_locale&#x27;</span>, <span class="string">&#x27;en_US&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="built_in">static</span>::<span class="variable">$fakers</span>[<span class="variable">$locale</span>])) &#123;</span><br><span class="line">            <span class="built_in">static</span>::<span class="variable">$fakers</span>[<span class="variable">$locale</span>] = FakerFactory::create(<span class="variable">$locale</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">static</span>::<span class="variable">$fakers</span>[<span class="variable">$locale</span>]-&gt;unique(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$fakers</span>[<span class="variable">$locale</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(EloquentFactory::class, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EloquentFactory::construct(</span><br><span class="line">            <span class="variable">$app</span>-&gt;make(FakerGenerator::class), <span class="keyword">$this</span>-&gt;app-&gt;databasePath(<span class="string">&#x27;factories&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册可排队实体解析器实现。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerQueueableEntityResolver</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(EntityResolver::class, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueueEntityResolver;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DatabaseManager"><a href="#DatabaseManager" class="headerlink" title="DatabaseManager"></a>DatabaseManager</h3><p>DatabaseManager是整个数据库服务的接口，我们通过<code>DB</code>门面进行操作时，实际上调用的就是DatabaseManager，它会通过数据库连接对象工厂（connectionFactory）获得数据库连接对象，然后数据库连接对象会进行具体的CURD操作。</p><p>比如我们在程序里执行了<code>DB::table(&#39;user&#39;)-&gt;get()</code>，在DatabaseManager中并没有<code>table</code>方法，这时就会触发<code>__call()</code>魔术函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseManager</span> <span class="keyword">implements</span> <span class="title">ConnectionResolverInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$factory</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$connections</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$parameters</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;connection()-&gt;<span class="variable">$method</span>(...<span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//没有指定connction是 name为空 connection就会获取到默认的mysql连接对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//解析连接名称</span></span><br><span class="line">      <span class="comment">//在配置文件为默认情况下 $name 为空时 返回的值为 mysql 和 null</span></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$database</span>, <span class="variable">$type</span>) = <span class="keyword">$this</span>-&gt;parseConnectionName(<span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$name</span> ?: <span class="variable">$database</span>;</span><br><span class="line"><span class="comment">//单例</span></span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;connections[<span class="variable">$name</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connections[<span class="variable">$name</span>] = <span class="keyword">$this</span>-&gt;configure(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;makeConnection(<span class="variable">$database</span>), <span class="variable">$type</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;connections[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseConnectionName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$name</span> ?: <span class="keyword">$this</span>-&gt;getDefaultConnection();</span><br><span class="line"><span class="comment">// 检查connection name 是否以::read, ::write结尾  比如&#x27;ucenter::read&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> Str::endsWith(<span class="variable">$name</span>, [<span class="string">&#x27;::read&#x27;</span>, <span class="string">&#x27;::write&#x27;</span>])</span><br><span class="line">                            ? explode(<span class="string">&#x27;::&#x27;</span>, <span class="variable">$name</span>, <span class="number">2</span>) : [<span class="variable">$name</span>, <span class="literal">null</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefaultConnection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//获取默认连接名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;database.default&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params">Connection <span class="variable">$connection</span>, <span class="variable">$type</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$connection</span> = <span class="keyword">$this</span>-&gt;setPdoForType(<span class="variable">$connection</span>, <span class="variable">$type</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先，我们将设置获取模式和数据库连接的其他一些依赖项。此方法基本上只是配置并准备使其被应用程序使用。完成后，我们将其退回。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;bound(<span class="string">&#x27;events&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$connection</span>-&gt;setEventDispatcher(<span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;events&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在这里，我们将设置一个reconnector回调。此重新连接器可以是任何可调用的，因此我们将设置一个Closure以使用此连接的名称从此管理器重新连接，这将允许我们从连接重新连接。</span></span><br><span class="line">        <span class="variable">$connection</span>-&gt;setReconnector(<span class="keyword">$this</span>-&gt;reconnector);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$connection</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">makeConnection</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//$name是&#x27;mysql&#x27;情况下, 从config/database.php中获取&#x27;connections.mysql&#x27;的配置</span></span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;configuration(<span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先，我们将通过连接名称进行检查，以查看是否已专门为此连接注册了扩展。如果有，我们将调用Closure，并将其传递给配置以使其能够解析连接。</span></span><br><span class="line">      <span class="comment">//比如在AppServiceProvider里通过DatabaseManager::extend(&#x27;mysql&#x27;, function () &#123;...&#125;)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;extensions[<span class="variable">$name</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;extensions[<span class="variable">$name</span>], <span class="variable">$config</span>, <span class="variable">$name</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接下来，我们将检查是否已为驱动程序注册扩展名，如果已注册，则将调用Closure，这将使我们能够为驱动程序本身提供一个更通用的解析器，该解析器适用于所有连接。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;extensions[<span class="variable">$driver</span> = <span class="variable">$config</span>[<span class="string">&#x27;driver&#x27;</span>]])) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;extensions[<span class="variable">$driver</span>], <span class="variable">$config</span>, <span class="variable">$name</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//通过工厂获取连接实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;factory-&gt;make(<span class="variable">$config</span>, <span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configuration</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$name</span> ?: <span class="keyword">$this</span>-&gt;getDefaultConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要获取数据库连接配置，我们将仅提取连接配置并获取给定名称的配置。如果配置不存在，我们将抛出异常并保释。</span></span><br><span class="line">        <span class="variable">$connections</span> = <span class="keyword">$this</span>-&gt;app[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;database.connections&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$config</span> = Arr::get(<span class="variable">$connections</span>, <span class="variable">$name</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&quot;Database connection [<span class="subst">&#123;$name&#125;</span>] not configured.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> ConfigurationUrlParser)</span><br><span class="line">                    -&gt;parseConfiguration(<span class="variable">$config</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> makeConnection中调用了ConnectionFatory的make方法来获取连接对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span>, <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;parseConfig(<span class="variable">$config</span>, <span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//是否有设置读写分离 如果设置了读写分离，那么就会调用 createReadWriteConnection 函数，生成具有读、写两个功能的 connection；否则的话，就会调用 createSingleConnection 函数，生成普通的连接对象。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$config</span>[<span class="string">&#x27;read&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createReadWriteConnection(<span class="variable">$config</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createSingleConnection(<span class="variable">$config</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseConfig</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arr::add(Arr::add(<span class="variable">$config</span>, <span class="string">&#x27;prefix&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;name&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单个connection</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createSingleConnection</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="keyword">$this</span>-&gt;createPdoResolver(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createConnection(</span><br><span class="line">        <span class="variable">$config</span>[<span class="string">&#x27;driver&#x27;</span>], <span class="variable">$pdo</span>, <span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>], <span class="variable">$config</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建读写两个connection</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createReadWriteConnection</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$connection</span> = <span class="keyword">$this</span>-&gt;createSingleConnection(<span class="keyword">$this</span>-&gt;getWriteConfig(<span class="variable">$config</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$connection</span>-&gt;setReadPdo(<span class="keyword">$this</span>-&gt;createReadPdo(<span class="variable">$config</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据库连接的方法 createConnection 的 $pdo是一个闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">use</span> (<span class="params"><span class="variable">$config</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createConnector(<span class="variable">$config</span>)-&gt;connect(<span class="variable">$config</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>在<code>illuminate/database</code>中连接器Connector是专门负责与PDO交互连接数据库的。createConnector方法会创建连接器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createConnector</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$config</span>[<span class="string">&#x27;driver&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;A driver must be specified.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="variable">$key</span> = <span class="string">&quot;db.connector.<span class="subst">&#123;$config[&#x27;driver&#x27;]&#125;</span>&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$config</span>[<span class="string">&#x27;driver&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlConnector;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pgsql&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostgresConnector;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;sqlite&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SQLiteConnector;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;sqlsrv&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SqlServerConnector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&quot;Unsupported driver [<span class="subst">&#123;$config[&#x27;driver&#x27;]&#125;</span>]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql的连接器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlConnector</span> <span class="keyword">extends</span> <span class="title">Connector</span> <span class="keyword">implements</span> <span class="title">ConnectorInterface</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//生成PDO连接数据库时用的DSN连接字符串</span></span><br><span class="line">        <span class="variable">$dsn</span> = <span class="keyword">$this</span>-&gt;getDsn(<span class="variable">$config</span>);</span><br><span class="line">        <span class="comment">//获取要传给PDO的选项参数</span></span><br><span class="line">        <span class="variable">$options</span> = <span class="keyword">$this</span>-&gt;getOptions(<span class="variable">$config</span>);</span><br><span class="line">        <span class="comment">//创建一个PDO连接对象</span></span><br><span class="line">        <span class="variable">$connection</span> = <span class="keyword">$this</span>-&gt;createConnection(<span class="variable">$dsn</span>, <span class="variable">$config</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>])) &#123;</span><br><span class="line">         <span class="variable">$connection</span>-&gt;exec(<span class="string">&quot;use `<span class="subst">&#123;$config[&#x27;database&#x27;]&#125;</span>`;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为连接设置字符集和collation</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;configureEncoding(<span class="variable">$connection</span>, <span class="variable">$config</span>);</span><br><span class="line">        <span class="comment">//设置time zone</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;configureTimezone(<span class="variable">$connection</span>, <span class="variable">$config</span>);</span><br><span class="line">        <span class="comment">//为数据库会话设置sql mode</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setModes(<span class="variable">$connection</span>, <span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$connection</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就通过连接器与 PHP 底层的 PDO 交互连接上数据库了。</p><p>Connection 就是 DatabaseManager 代理的数据库连接对象了， 所以最开始执行的代码 <code>DB::table(&#39;users&#39;)-&gt;get() </code>经过我们上面讲的历程，最终是由 Connection 来完成执行的，table 方法返回了一个 QueryBuilder 对象，这个对象里定义里那些我们经常用到的 <code>where</code>,<code> get</code>,<code>first</code> 等方法， 它会根据调用的方法生成对应的 SQL 语句，最后通过 Connection 对象执行来获得最终的结果。 详细内容我们等到以后讲查询构建器的时候再看。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>DB</td><td>DatabaseManager的静态代理。</td></tr><tr><td>DatabaseManager</td><td>Database面向外部的接口，应用中所有与Database有关的操作都是通过与这个接口交互来完成的。</td></tr><tr><td>ConnectionFactory</td><td>创建数据库连接对象的类工厂。</td></tr><tr><td>Connection</td><td>数据库连接对象，执行数据库操作最后都是通过它与PHP底层的PDO交互来完成的。</td></tr><tr><td>Connector</td><td>作为Connection的成员专门负责过PDO连接数据库</td></tr></tbody></table><h2 id="查询构造器"><a href="#查询构造器" class="headerlink" title="查询构造器"></a>查询构造器</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Database核心架构&quot;&gt;&lt;a href=&quot;#Database核心架构&quot; class=&quot;headerlink&quot; title=&quot;Database核心架构&quot;&gt;&lt;/a&gt;Database核心架构&lt;/h2&gt;&lt;p&gt;Laravel主要有两种方式与数据库进行交互：&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP相关</title>
    <link href="http://leckkk.github.io/2020/07/21/PHP%20%E6%8B%93%E5%B1%95%E5%AE%89%E8%A3%85/"/>
    <id>http://leckkk.github.io/2020/07/21/PHP%20%E6%8B%93%E5%B1%95%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-21T11:41:27.856Z</published>
    <updated>2021-03-16T04:58:00.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-查看当前已经安装的拓展"><a href="#1-查看当前已经安装的拓展" class="headerlink" title="1.查看当前已经安装的拓展"></a>1.查看当前已经安装的拓展</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><p>这个命令会打印出你现在已经安装的拓展</p><h3 id="2-下载对应版本的php安装包"><a href="#2-下载对应版本的php安装包" class="headerlink" title="2.下载对应版本的php安装包"></a>2.下载对应版本的php安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O php-7.3.12.tar.gz http://cn2.php.net/get/php-7.3.12.tar.gz/from/this/mirror</span><br></pre></td></tr></table></figure><h3 id="3-解压php的压缩包"><a href="#3-解压php的压缩包" class="headerlink" title="3.解压php的压缩包"></a>3.解压php的压缩包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf php-7.3.12.tar.gz ~</span><br></pre></td></tr></table></figure><h3 id="4-进入拓展目录"><a href="#4-进入拓展目录" class="headerlink" title="4.进入拓展目录"></a>4.进入拓展目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">～/php-7.3.12/ext/fileinfo</span><br></pre></td></tr></table></figure><p>这里我解压到了～目录 所以是～/</p><p>拓展包放置的文件夹是ext文件夹</p><p>进入你所需要安装的拓展的包</p><p>我这里进的是fileinfo</p><h3 id="5-编译并安装"><a href="#5-编译并安装" class="headerlink" title="5.编译并安装"></a>5.编译并安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我php安装在/usr/<span class="built_in">local</span>/php中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这两行命令都要在 ～/php-7.3.12/ext/fileinfo 中执行</span></span><br><span class="line"></span><br><span class="line">/usr/local/php/bin/pipize</span><br><span class="line"></span><br><span class="line">./configure -with-php-config=/usr/local/php/bin/php-config</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="6-修改php-ini"><a href="#6-修改php-ini" class="headerlink" title="6.修改php.ini"></a>6.修改php.ini</h3><p>我这添加了fileinfo拓展 所以就</p><p>加入 extension=fileinfo</p><hr><h3 id="代码测试覆盖率"><a href="#代码测试覆盖率" class="headerlink" title="代码测试覆盖率"></a>代码测试覆盖率</h3><blockquote><p>phpunit –coverage-html ./your_document tests/your_test_file</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-查看当前已经安装的拓展&quot;&gt;&lt;a href=&quot;#1-查看当前已经安装的拓展&quot; class=&quot;headerlink&quot; title=&quot;1.查看当前已经安装的拓展&quot;&gt;&lt;/a&gt;1.查看当前已经安装的拓展&lt;/h3&gt;&lt;figure class=&quot;highlight shel</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自动加载解析</title>
    <link href="http://leckkk.github.io/2020/07/21/laravel%E6%BA%90%E7%A0%81-%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%A7%A3%E6%9E%90/"/>
    <id>http://leckkk.github.io/2020/07/21/laravel%E6%BA%90%E7%A0%81-%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%A7%A3%E6%9E%90/</id>
    <published>2020-07-21T11:32:38.232Z</published>
    <updated>2021-03-16T04:57:11.392Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 框架启动的第一件事便是加载 自动加载文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p>而这个autoload.php中却只有简简单单的几行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/composer/autoload_real.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0::getLoader();</span><br></pre></td></tr></table></figure><p>而这个autoload_real.php 才是真正的核心代码</p><p>整个autoload_real.php源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$loader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;Composer\Autoload\ClassLoader&#x27;</span> === <span class="variable">$class</span>) &#123;</span><br><span class="line">            <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/ClassLoader.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">self</span>::<span class="variable">$loader</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$loader</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spl_autoload_register(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line">        spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$useStaticLoader</span> = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">&#x27;HHVM_VERSION&#x27;</span>) &amp;&amp; (!function_exists(<span class="string">&#x27;zend_loader_file_encoded&#x27;</span>) || !zend_loader_file_encoded());</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">            <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_static.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            call_user_func(\Composer\Autoload\ComposerStaticInitba18d171b895589f003c9e6898eda4c0::getInitializer(<span class="variable">$loader</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_namespaces.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">                <span class="variable">$loader</span>-&gt;set(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_psr4.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">                <span class="variable">$loader</span>-&gt;setPsr4(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$classMap</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_classmap.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$classMap</span>) &#123;</span><br><span class="line">                <span class="variable">$loader</span>-&gt;addClassMap(<span class="variable">$classMap</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$loader</span>-&gt;register(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">            <span class="variable">$includeFiles</span> = Composer\Autoload\ComposerStaticInitba18d171b895589f003c9e6898eda4c0::<span class="variable">$files</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$includeFiles</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_files.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$includeFiles</span> <span class="keyword">as</span> <span class="variable">$fileIdentifier</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">            composerRequireba18d171b895589f003c9e6898eda4c0(<span class="variable">$fileIdentifier</span>, <span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$loader</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composerRequireba18d171b895589f003c9e6898eda4c0</span>(<span class="params"><span class="variable">$fileIdentifier</span>, <span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;__composer_autoload_files&#x27;</span>][<span class="variable">$fileIdentifier</span>])) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$GLOBALS</span>[<span class="string">&#x27;__composer_autoload_files&#x27;</span>][<span class="variable">$fileIdentifier</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一块一块来讲</p><h3 id="第一块-单例和实例化"><a href="#第一块-单例和实例化" class="headerlink" title="第一块 单例和实例化"></a>第一块 单例和实例化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;Composer\Autoload\ClassLoader&#x27;</span> === <span class="variable">$class</span>) &#123;</span><br><span class="line">            <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/ClassLoader.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">self</span>::<span class="variable">$loader</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$loader</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spl_autoload_register(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line">        spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的类名</p><blockquote><p>ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0</p></blockquote><p>是ComposerAutoloaderInit + 一串hash字符串拼接成的</p><p>目的就是防止你会用到相同的类名</p><p>往下看就是 getLoader() 方法中的前3行</p><p>很明显他是一个单例</p><p>然后就是</p><blockquote><p>spl_autoload_register(array(‘ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0’, ‘loadClassLoader’), true, true);</p></blockquote><blockquote><p>self::$loader = $loader = new \Composer\Autoload\ClassLoader();</p></blockquote><blockquote><p>spl_autoload_unregister(array(‘ComposerAutoloaderInitba18d171b895589f003c9e6898eda4c0’, ‘loadClassLoader’));</p></blockquote><p>这里先是注册了 loadClassLoader 然后在实例化ClassLoader()类之后 便又销毁了loadClassLoader</p><p>为什么不直接require，而要这么麻烦？原因就是怕有的用户也定义了个</p><p><em><strong>\Composer\Autoload\ClassLoader</strong></em> 命名空间，导致自动加载错误文件。那为什么不跟引导类一样用个 hash 呢？因为这个类是可以复用的，框架允许用户使用这个类。</p><h3 id="第二块-初始化核心类"><a href="#第二块-初始化核心类" class="headerlink" title="第二块 初始化核心类"></a>第二块 初始化核心类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$useStaticLoader</span> = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">&#x27;HHVM_VERSION&#x27;</span>) &amp;&amp; (!function_exists(<span class="string">&#x27;zend_loader_file_encoded&#x27;</span>) || !zend_loader_file_encoded());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_static.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        call_user_func(\Composer\Autoload\ComposerStaticInit6249d251c63e829a93df1039e481c2f3::getInitializer(<span class="variable">$loader</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_namespaces.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;set(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_psr4.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;setPsr4(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$classMap</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_classmap.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$classMap</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;addClassMap(<span class="variable">$classMap</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里先是判断 php的版本是否大于5.6 并且 没有使用HHVM 并且 没有zend_loader_file_encoded() 决定是否使用静态加载</p><p>若是 则使用getInitializer()直接加载</p><p><em><strong>autoload_static.php</strong></em> 里面主要有</p><blockquote><p>$files 全局函数</p></blockquote><blockquote><p>$prefixLengthsPsr4 PSR4标准顶级命名空间映射数组 这个里面放的是顶级命名空间的长度</p></blockquote><blockquote><p>$prefixDirsPsr4 根据长度再在这个数组中找到路径</p></blockquote><blockquote><p>$prefixesPsr0 psr0 规范的顶级命名空间映射</p></blockquote><blockquote><p>$classMap 直接命名空间全名与目录的映射，没有顶级命名空间 很庞大的一个数组</p></blockquote><p>这五个数组</p><p>而getInitializer()绑定了后面四个数组</p><p>若不使用静态加载</p><p>其实也是将一个个命名空间映射与loader进行绑定</p><h3 id="第三块-注册"><a href="#第三块-注册" class="headerlink" title="第三块 注册"></a>第三块 注册</h3><p>这块非常简单粗暴</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$loader</span>-&gt;register(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$prepend</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        spl_autoload_register(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">&#x27;loadClass&#x27;</span>), <span class="literal">true</span>, <span class="variable">$prepend</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是将loadCLass注册到 PHP SPL的spl_autoload_register() 中去</p><p>每当PHP遇到一个不认识的命名空间的时候，PHP会自动调用注册到spl_autoload_register里面的函数堆栈，运行其中的每个函数，直到找到命名空间对应的文件。</p><p>然后就是加载 全局函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">    <span class="variable">$includeFiles</span> = Composer\Autoload\ComposerStaticInitba18d171b895589f003c9e6898eda4c0::<span class="variable">$files</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$includeFiles</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_files.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$includeFiles</span> <span class="keyword">as</span> <span class="variable">$fileIdentifier</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">    composerRequireba18d171b895589f003c9e6898eda4c0(<span class="variable">$fileIdentifier</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$loader</span>;</span><br></pre></td></tr></table></figure><p>这里也区分是否使用静态加载</p><h3 id="第四块-运行"><a href="#第四块-运行" class="headerlink" title="第四块 运行"></a>第四块 运行</h3><p>这块就是自动加载核心的核心了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> = <span class="keyword">$this</span>-&gt;findFile(<span class="variable">$class</span>)) &#123;</span><br><span class="line">        includeFile(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是被注册进spl_autoload_register() 的方法</p><p>奥秘就在findFile()这个方法里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findFile</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// class map lookup</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;classMap[<span class="variable">$class</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classMap[<span class="variable">$class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;classMapAuthoritative || <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;missingClasses[<span class="variable">$class</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="keyword">$this</span>-&gt;apcuPrefix) &#123;</span><br><span class="line">        <span class="variable">$file</span> = apcu_fetch(<span class="keyword">$this</span>-&gt;apcuPrefix.<span class="variable">$class</span>, <span class="variable">$hit</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$hit</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$file</span> = <span class="keyword">$this</span>-&gt;findFileWithExtension(<span class="variable">$class</span>, <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search for Hack files if we are running on HHVM</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$file</span> &amp;&amp; defined(<span class="string">&#x27;HHVM_VERSION&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">$this</span>-&gt;findFileWithExtension(<span class="variable">$class</span>, <span class="string">&#x27;.hh&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="keyword">$this</span>-&gt;apcuPrefix) &#123;</span><br><span class="line">        apcu_add(<span class="keyword">$this</span>-&gt;apcuPrefix.<span class="variable">$class</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="comment">// Remember that this class does not exist.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;missingClasses[<span class="variable">$class</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在PHP遇到不认识的命名空间的时候 便会执行findFile()</p><p>这里分两大块 classMap和findFileWithExtension()方法</p><p>classMap简单粗暴 就是从classMap数组中寻找 找到便返回</p><p>实际上大多数也都在第一个判断就被找到了</p><p>例如：<img src="http://700777.xyz/usr/uploads/2019/12/2935824661.png" alt="FE01ED3D-6E86-4A79-9BD3-20FE979CB43C.png"></p><p>然后就是findFileWithExtension()了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findFileWithExtension</span>(<span class="params"><span class="variable">$class</span>, <span class="variable">$ext</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// PSR-4 lookup</span></span><br><span class="line">        <span class="comment">// 将 ‘\\’ 转为 ‘/’ 并拼接上 .php</span></span><br><span class="line">        <span class="comment">//例如 ww\\ss\\cc =&gt; ww/ss/cc.php</span></span><br><span class="line">        <span class="variable">$logicalPathPsr4</span> = strtr(<span class="variable">$class</span>, <span class="string">&#x27;\\&#x27;</span>, DIRECTORY_SEPARATOR) . <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$class</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//根据首字母来查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixLengthsPsr4[<span class="variable">$first</span>])) &#123;</span><br><span class="line">            <span class="variable">$subPath</span> = <span class="variable">$class</span>;</span><br><span class="line">            <span class="comment">// 获取最右边的 \\ 并截取 例如：ww\\ss\\cc 变为 ww\\ss 循环在psr4标准中匹配</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">false</span> !== <span class="variable">$lastPos</span> = strrpos(<span class="variable">$subPath</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$subPath</span> = substr(<span class="variable">$subPath</span>, <span class="number">0</span>, <span class="variable">$lastPos</span>);</span><br><span class="line">                <span class="variable">$search</span> = <span class="variable">$subPath</span> . <span class="string">&#x27;\\&#x27;</span>; <span class="comment">// ww\\ss\\</span></span><br><span class="line">                <span class="comment">// 进行匹配</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>])) &#123;</span><br><span class="line">                <span class="comment">//若匹配上了 这里就会截取到/cc.php</span></span><br><span class="line">                    <span class="variable">$pathEnd</span> = DIRECTORY_SEPARATOR . substr(<span class="variable">$logicalPathPsr4</span>, <span class="variable">$lastPos</span> + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 对匹配上的psr4 数组遍历 检查是否有这个文件 若有就返回</span></span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>] <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (file_exists(<span class="variable">$file</span> = <span class="variable">$dir</span> . <span class="variable">$pathEnd</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PSR-4 fallback dirs</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr4 <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="variable">$file</span> = <span class="variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="variable">$logicalPathPsr4</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PSR-0 lookup</span></span><br><span class="line">        <span class="comment">// ww\\ss\\cc =&gt; ww/ss</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$pos</span> = strrpos(<span class="variable">$class</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// namespaced class name</span></span><br><span class="line">            <span class="comment">// 将路径最后的 _ 替换为 /</span></span><br><span class="line">            <span class="variable">$logicalPathPsr0</span> = substr(<span class="variable">$logicalPathPsr4</span>, <span class="number">0</span>, <span class="variable">$pos</span> + <span class="number">1</span>)</span><br><span class="line">                . strtr(substr(<span class="variable">$logicalPathPsr4</span>, <span class="variable">$pos</span> + <span class="number">1</span>), <span class="string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// PEAR-like class name</span></span><br><span class="line">            <span class="comment">// 替换路径里所有的 _</span></span><br><span class="line">            <span class="variable">$logicalPathPsr0</span> = strtr(<span class="variable">$class</span>, <span class="string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR) . <span class="variable">$ext</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据路径首字母来查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixesPsr0[<span class="variable">$first</span>])) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixesPsr0[<span class="variable">$first</span>] <span class="keyword">as</span> <span class="variable">$prefix</span> =&gt; <span class="variable">$dirs</span>) &#123;</span><br><span class="line">            <span class="comment">// 确认 class 中 有 prefix 并在 第0位</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> === strpos(<span class="variable">$class</span>, <span class="variable">$prefix</span>)) &#123;</span><br><span class="line">                <span class="comment">// 遍历dirs数组 能找到文件就返回</span></span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$dirs</span> <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (file_exists(<span class="variable">$file</span> = <span class="variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="variable">$logicalPathPsr0</span>)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PSR-0 fallback dirs</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr0 <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="variable">$file</span> = <span class="variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="variable">$logicalPathPsr0</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PSR-0 include paths.</span></span><br><span class="line">        <span class="comment">// 在当前include目录 查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;useIncludePath &amp;&amp; <span class="variable">$file</span> = stream_resolve_include_path(<span class="variable">$logicalPathPsr0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里也分为两块 先在psr4规范中寻找 再在psr0规范中寻找</p><p>以上这些就是自动加载的原理了</p><p>参考文献：<a href="https://leoyang90.gitbooks.io/laravel-source-analysis/content/PHP%20Composer-%E2%80%94%E2%80%94-%E6%B3%A8%E5%86%8C%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html">composer自动加载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Laravel 框架启动的第一件事便是加载 自动加载文件&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux Tip</title>
    <link href="http://leckkk.github.io/2020/07/21/Linux%20Tip/"/>
    <id>http://leckkk.github.io/2020/07/21/Linux%20Tip/</id>
    <published>2020-07-21T11:28:39.716Z</published>
    <updated>2021-03-16T04:57:34.416Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h4><p>添加ssh-key 实现免密登陆修改</p><p><em>/root/.ssh/authorized_keys</em>直接在文件中复制入新的 <em>ssh-key</em></p><h4 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h4><p>移动整个目录 包括隐藏文件</p><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p20" alt="52666b64010c12521e29dfae5d414d4c.png"></p><p>使用.[!.]* 而不直接使用*</p><p>使用 * 会落下隐藏文件</p><h4 id="firewall-常用命令"><a href="#firewall-常用命令" class="headerlink" title="firewall 常用命令"></a>firewall 常用命令</h4><p>查看防火墙服务的状态</p><blockquote><p>systemctl status firewalld</p></blockquote><p>查看防火墙状态</p><blockquote><p>firewall-cmd –state</p></blockquote><p>防火墙启动 关闭 重启</p><blockquote><p>service firewalld start</p></blockquote><blockquote><p>service firewalld restart</p></blockquote><blockquote><p>service firewalld stop</p></blockquote><p>查看防火墙规则列表</p><blockquote><p>firewall-cmd –list-all</p></blockquote><p>查询端口是否开放</p><blockquote><p>firewall-cmd –query-port=8080/tcp</p></blockquote><p>开放某端口</p><blockquote><p>firewall-cmd –permanent –add-port=80/tcp</p></blockquote><p>关闭某端口</p><blockquote><p>firewall-cmd –permanent –remove-port=80/tcp</p></blockquote><p>重启防火墙 （重新加载配置）</p><blockquote><p>firewall-cmd –reload</p></blockquote><h4 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h4><p>查看状态</p><blockquote><p>ufw status</p></blockquote><p>开启关闭防火墙</p><blockquote><p>ufw enable</p><p>ufw disable</p></blockquote><p>开放关闭端口</p><blockquote><p>ufw deny 53</p><p>ufw allow 53</p></blockquote><h4 id="并发测试工具"><a href="#并发测试工具" class="headerlink" title="并发测试工具"></a>并发测试工具</h4><p>安装</p><blockquote><p>yum install httpd-tools</p></blockquote><p>使用</p><blockquote><p>ab -n 1000 -c 100 <a href="http://www.baidu.com/">http://www.baidu.com/</a></p></blockquote><blockquote><p>-n 总请求数</p></blockquote><blockquote><p>-c 并发数</p></blockquote><blockquote><p>-k 是否开启长链接</p></blockquote><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p21" alt="9654ee241d4f1294d9b02afe62404326.png"></p><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p22" alt="c734a2ed88b98202c1569438cfb321f8.png"></p><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p23" alt="7817e4298541aa4abef63689dc835afe.png"></p><h4 id="ipv6-虚拟网卡命令"><a href="#ipv6-虚拟网卡命令" class="headerlink" title="ipv6 虚拟网卡命令"></a>ipv6 虚拟网卡命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">modprobe ipv6</span><br><span class="line"></span><br><span class="line">ip tunnel add he-ipv6 mode sit remote 66.220.18.42 local 106.14.126.63 ttl 255</span><br><span class="line"></span><br><span class="line">ip link set he-ipv6 up</span><br><span class="line"></span><br><span class="line">ip addr add 2001:470:c:ece::2/64 dev he-ipv6</span><br><span class="line"></span><br><span class="line">ip route add ::/0 dev he-ipv6</span><br><span class="line"></span><br><span class="line">ip -f inet6 addr</span><br></pre></td></tr></table></figure><h4 id="crontab-www用户执行"><a href="#crontab-www用户执行" class="headerlink" title="crontab www用户执行"></a>crontab www用户执行</h4><p>原因：</p><p>laravel 的command命令由crontab执行 导致log文件的所有者为root用户</p><p>正常运行是为www用户 无法写入日志 导致大量报错</p><p>解决方法：选定执行用户 执行crontab 任务</p><p>修改 /etc/corntab 文件即可</p><p>在该文件中写的任务可以指定执行用户</p><h4 id="superbench"><a href="#superbench" class="headerlink" title="superbench"></a>superbench</h4><blockquote><p>wget -qO- –no-check-certificate <a href="https://raw.githubusercontent.com/oooldking/script/master/superbench.sh">https://raw.githubusercontent.com/oooldking/script/master/superbench.sh</a> | bash</p></blockquote><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p24" alt="b075fc658a5f5f5d4775d1130765a007.png"></p><p><img src="evernotecid://9FEBF782-627D-4E65-BBC1-7CC5F942A80A/appyinxiangcom/25316149/ENResource/p25" alt="0315326b3b0c3ef45d2274dfdf5b8a14.png"></p><h4 id="nps"><a href="#nps" class="headerlink" title="nps"></a>nps</h4><p>nps安装后的文件目录：</p><blockquote><p>/etc/nps</p></blockquote><p>nps可视化页面：</p><blockquote><p>IP:8080</p></blockquote><p>连接客户端连接服务端命令：</p><blockquote><p>./npc -server=106.14.126.63:8024 -vkey=wox6skcyhax3vwil -type=tcp</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;添加密钥&quot;&gt;&lt;a href=&quot;#添加密钥&quot; class=&quot;headerlink&quot; title=&quot;添加密钥&quot;&gt;&lt;/a&gt;添加密钥&lt;/h4&gt;&lt;p&gt;添加ssh-key 实现免密登陆修改&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/root/.ssh/authorized_keys&lt;/em&gt;直</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="http://leckkk.github.io/2020/07/21/nginx/"/>
    <id>http://leckkk.github.io/2020/07/21/nginx/</id>
    <published>2020-07-21T11:25:06.420Z</published>
    <updated>2021-03-16T04:57:48.969Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">//ssl start</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">ssl_certificate</span> /data/server/ssl/class-assistant-help.chingshen.co/class-assistant-help.chingshen.co.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /data/server/ssl/class-assistant-help.chingshen.co/class-assistant-help.chingshen.co.key;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;  </span><br><span class="line">//ssl end</span><br><span class="line">  <span class="attribute">server_name</span> yuetu.api.chingshen.cn;</span><br><span class="line">  <span class="attribute">access_log</span> /data/wwwlogs/yuetu.api.chingshen.cn_nginx.log combined;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">  <span class="attribute">root</span> /data/wwwroot/yuetu.api.chingshen.cn/public;</span><br><span class="line">//ssl</span><br><span class="line">  <span class="attribute">if</span> ($ssl_protocol = <span class="string">&quot;&quot;</span>) &#123; <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri; &#125;</span><br><span class="line">//ssl end</span><br><span class="line">//laravel try_file配置 要么直接写进文档 要么include进来</span><br><span class="line">  <span class="attribute">include</span> /usr/local/nginx/conf/rewrite/laravel.conf;</span><br><span class="line">//laravel try_file</span><br><span class="line">  <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">  <span class="comment">#error_page 502 /502.html;</span></span><br><span class="line"></span><br><span class="line">//前端vue history </span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">//vue history end</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ [^/]\.php(/|$)</span> &#123;</span><br><span class="line">    <span class="comment">#fastcgi_pass remote_php_ip:9000;</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/dev/shm/php-cgi.sock;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)?$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重写配置 rewrite/larval.conf</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重新加载nginx配置"><a href="#重新加载nginx配置" class="headerlink" title="重新加载nginx配置"></a>重新加载nginx配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>laradock</title>
    <link href="http://leckkk.github.io/2020/07/21/laradock/"/>
    <id>http://leckkk.github.io/2020/07/21/laradock/</id>
    <published>2020-07-21T11:21:20.830Z</published>
    <updated>2021-03-16T04:56:27.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>docker-compose up -d nginx mysql redis</p><h3 id="进入workspace"><a href="#进入workspace" class="headerlink" title="进入workspace"></a>进入workspace</h3><p>docker-compose exec workspace bash</p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>workspace中的项目链接数据库时拒绝链接或者没有找到文件</p><p>应该吧项目的 HOST修改为使用的工具名</p><p>例如： DB_HOST=127.0.0.1</p><p>应改为：DB_HOST=mysql</p><p>redis_host也是如此</p><p><img src="https://cdn.learnku.com/uploads/images/201809/12/21241/8WDlT3ILAZ.png?imageView2/2/w/1240/h/0" alt="image"></p><h3 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h3><p>最近在本地要跑多个项目 并且涉及到一个本地项目使用laravel的Http工具（curl）来请求本地的另一个项目，这时laradock就出现了点问题，给我报了</p><blockquote><p>[curl] 7: Failed to connect to your-domain.test port 80: Connection refused</p></blockquote><p>然后在宿主机的环境下用tinker工具请求 没问题</p><p>在laradock_workspace_1容器中进行curl请求，报错了</p><p>于是就定位问题出在容器（虽然不是workspace容器的问题）</p><p>搜索一番 尝试过在容器中修改hosts文件 将域名ip改为 10.0.75.2</p><p>的确有效，在容器中curl变了，变成了空返回报错</p><p>无效</p><p>最后搜索发现是nginx容器的问题</p><p>解决办法是修改docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">frontend:</span></span><br><span class="line"><span class="attr">aliases:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">your</span> <span class="string">domain</span></span><br><span class="line"><span class="attr">backend:</span></span><br><span class="line"><span class="attr">aliases:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">your</span> <span class="string">domain</span></span><br></pre></td></tr></table></figure><p>然后重新安装nginx</p><blockquote><p>docker-compose stop nginx</p><p>docker-compose bild –no-cache nginx</p><p>docker-compose up -d nginx</p></blockquote><p>参考文献：</p><p><a href="https://github.com/laradock/laradock/issues/435">github issue</a></p><p><a href="https://segmentfault.com/a/1190000018990416">segment fault</a></p><h3 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h3><p>修改laradock的mysql的my.cnf重启容器不会生效</p><p>需要重新build</p><h3 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h3><p>使用<code>php-fpm/xdebug stop</code>关闭<code>php-fpm</code>容器的xdebug失败问题</p><p>原因：<code>php-fpm/xdebug</code>脚本中的<code>xdebug_start</code>和<code>xdebug_stop</code>函数中的 <code>/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</code> 路径变为了<code>/usr/local/etc/php/conf.d/xdebug.ini</code></p><p>导致 sed -i 的替换文本 替换失败</p><blockquote><p>‘s/^;zend_extension=/zend_extension=/g’     xdebug_start的替换文字 主要就是前面的注释符号</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;启动容器&quot;&gt;&lt;a href=&quot;#启动容器&quot; class=&quot;headerlink&quot; title=&quot;启动容器&quot;&gt;&lt;/a&gt;启动容器&lt;/h3&gt;&lt;p&gt;docker-compose up -d nginx mysql redis&lt;/p&gt;
&lt;h3 id=&quot;进入workspace</summary>
      
    
    
    
    
  </entry>
  
</feed>
